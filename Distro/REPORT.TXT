CSC D84 - Artificial Intelligence

Assignment 2 - MiniMax and Game Trees 

This assignment is worth:

10 AIUs (Artificial Intelligence Units)
toward the 35% assignment component of your final
mark.

________________________________________________

Student Name 1 (last, first): Fung, Albion

Student Name 2 (last, first): Law, Chi Fai

Student number 1: 1002444321

Student number 2: 1002470444

UTORid 1: fungalbi

UTORid 2: lawchi1

READ THIS AND SIGN YOUR NAME AT THE END:

 I certify that I have read the UTSC code on academic
honesty and plaguarism. All work submitted as part
of this assignment is my own.

	Signed: _Albion Fung__	_Chi Fai Law__


(-5 marks for failing to provide the identifying
 information requested above)
________________________________________________

Answer the following questions. Be concise and clear
but explain carefully when needed.

1 .- (5 marks) Explain the design of your utility function.
     Describe all the factors that influence its value, and
     how their influence was evaluated and integrated into
     a single, meaningful value. Convince us that your utility
     makes sense!
	
Basically, if cat, pls dont go there. (BIG Malus) Otherwise, get closest cheese and, after modifiers, return.
The value basically stands for how efficient it is to follow a certain route, as well as how safe it is to continue down that road.


2 .- (2 marks) Ignoring computation time, what is the effect of
     search depth (number of turns) on the chances of the mouse
     winning the game. 

The more search depth, the higher chance the mouse wins the game, since it is able to 'see more' of future moves and thus make a more accurate prediction on where to go to maximize chances of victory.

3 .- (2 marks) What situations will cause your mouse to lose?
     can these be fixed either with the utility function, or
     by changing the search depth? if so, how?
	
Right now, if our mouse makes a poor cheese choice (e.g. a cheese in a corner while other cheeses exist), our mouse loses. We believe this could be fixed by simply putting heavier weight on a non corner cheese (either with utility or search depth, but we prefer search depth), since our code is already attempting to detect and avoid dead ends intentionally, a similar implementation shouldn't be too hard.

4 .- (2 marks) Compare cats with smartness=.8 against cats with
     smartness=1 - which are harder for your mouse to beat?
     why do you think that is?

Smartness=1 is easier to beat, perhaps because the projected move for the cat is the optimal one, and when a suboptimal move is committed by the cat, its like 'being thrown a curveball', and somewhat confuses the alg.

5 .- (2 marks) Can the mouse be made unbeatable by having an
     optimal utility function?

We believe it could be made to a point of near unbeatability, since the mouse would know precisely what square to go on in order to either avoid death, or get cheese, or both. It would be smart enough to choose the most dangerous cheese(s) last in order to maximize odds of winning, as well as avoiding going into areas that would cause it to become trapped and lose.

6 .- (2 bonus marks) Could a human playing the game in place
      of the mouse do better than your code? (yes, no, and
      a reasonable explanation of why)

Yes. Our code at the moment is not optimal, and while it can pull off some amazing plays on certain seeds and certain spawn locations, at other times it makes poor decisions and ends up dying way earlier than it should have. As such, we believe a human can probably play better than our mouse given our current implementation.

_____________________________________________________

Mark with an 'x' where appropriate. If something is only
working partially, briefly describe what works, what
doesn't work, or what problems exist.
	
	Complete/Working	Partial		Not done

Utility
 function	x

MiniMax				   x

Our Minimax functions, but currently has a bug that is causing the mouse to occasionally seek death, ignoring the cat that lies in the path of its choice despite imminent cat-pocalypse.

Alpha/Beta	x
 pruning

_____________________________________________________

Marking:

(10 marks) Implemented a non-trivial, clever, and
           effective utility function. It allows the
           mouse to win the game often. 

(10 marks) Correctly implementing MiniMax. The algorithm
           should produce the expected behaviour. The
           mouse should take a reasonable path to the
           cheese and avoid cats. The cats will try to
           catch the mouse. Mouse is not easy to catch.

(10 marks) Implemented alpha-beta pruning. The algorithm
           significantly reduces the amount of search
           while producing identical results as those
           from standard MiniMax 

(15 marks) Competitive (TA assigned) based on how smart
           your mouse is (this is related to your
           utility function above!)

(15 marks) Answers in this report file

(2 bonus)  Bonus!

Total for A2:       / out of 60


